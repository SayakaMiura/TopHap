import sys
import os
import json
import datetime
import argparse
import random
import glob

verbose = False
very_verbose = True

def main(args):
	if very_verbose:
		print("Starting function {}".format("main"))
	json_file = args.json_vcf
	min_group_size = args.min_group_size
	min_subgroup_size = args.min_subgroup_size
	freq_threshold = args.min_freq
	output = args.output
	json_tree = args.json_tree
	mismatch_threshold = args.mismatch_threshold
	if output != "." and not os.path.exists(output):
		os.mkdir(output)
	
	with open(json_file, 'r') as json_data:
		json_object = json.load(json_data)
		print("Finished loading JSON VCF file...")
	if args.reference is not None:
		with open(args.reference, 'r') as file:
			ref_seq = file.readline().strip()
			json_object["reference_base"] = [x for x in ref_seq]
	else:
		try:
			ref_seq = "".join(json_object["reference_base"])
		except:
			print("Could not find 'reference_base' property at top of JSON structure, defaulting to hardcoded COVID progenitor sequence.")
			ref_seq = "ATTAAAGGTTTATACCTTCCCAGGTAACAAACCAACCAACTTTCGATCTCTTGTAGATCTGTTCTCTAAACGAACTTTAAAATCTGTGTGGCTGTCACTCGGCTGCATGCTTAGTGCACTCACGCAGTATAATTAATAACTAATTACTGTCGTTGACAGGACACGAGTAACTCGTCTATCTTCTGCAGGCTGCTTACGGTTTCGTCCGTGTTGCAGCCGATCATCAGCACATCTAGGTTTCGTCCGGGTGTGACCGAAAGGTAAGATGGAGAGCCTTGTCCCTGGTTTCAACGAGAAAACACACGTCCAACTCAGTTTGCCTGTTTTACAGGTTCGCGACGTGCTCGTACGTGGCTTTGGAGACTCCGTGGAGGAGGTCTTATCAGAGGCACGTCAACATCTTAAAGATGGCACTTGTGGCTTAGTAGAAGTTGAAAAAGGCGTTTTGCCTCAACTTGAACAGCCCTATGTGTTCATCAAACGTTCGGATGCTCGAACTGCACCTCATGGTCATGTTATGGTTGAGCTGGTAGCAGAACTCGAAGGCATTCAGTACGGTCGTAGTGGTGAGACACTTGGTGTCCTTGTCCCTCATGTGGGCGAAATACCAGTGGCTTACCGCAAGGTTCTTCTTCGTAAGAACGGTAATAAAGGAGCTGGTGGCCATAGTTACGGCGCCGATCTAAAGTCATTTGACTTAGGCGACGAGCTTGGCACTGATCCTTATGAAGATTTTCAAGAAAACTGGAACACTAAACATAGCAGTGGTGTTACCCGTGAACTCATGCGTGAGCTTAACGGAGGGGCATACACTCGCTATGTCGATAACAACTTCTGTGGCCCTGATGGCTACCCTCTTGAGTGCATTAAAGACCTTCTAGCACGTGCTGGTAAAGCTTCATGCACTTTGTCCGAACAACTGGACTTTATTGACACTAAGAGGGGTGTATACTGCTGCCGTGAACATGAGCATGAAATTGCTTGGTACACGGAACGTTCTGAAAAGAGCTATGAATTGCAGACACCTTTTGAAATTAAATTGGCAAAGAAATTTGACACCTTCAATGGGGAATGTCCAAATTTTGTATTTCCCTTAAATTCCATAATCAAGACTATTCAACCAAGGGTTGAAAAGAAAAAGCTTGATGGCTTTATGGGTAGAATTCGATCTGTCTATCCAGTTGCGTCACCAAATGAATGCAACCAAATGTGCCTTTCAACTCTCATGAAGTGTGATCATTGTGGTGAAACTTCATGGCAGACGGGCGATTTTGTTAAAGCCACTTGCGAATTTTGTGGCACTGAGAATTTGACTAAAGAAGGTGCCACTACTTGTGGTTACTTACCCCAAAATGCTGTTGTTAAAATTTATTGTCCAGCATGTCACAATTCAGAAGTAGGACCTGAGCATAGTCTTGCCGAATACCATAATGAATCTGGCTTGAAAACCATTCTTCGTAAGGGTGGTCGCACTATTGCCTTTGGAGGCTGTGTGTTCTCTTATGTTGGTTGCCATAACAAGTGTGCCTATTGGGTTCCACGTGCTAGCGCTAACATAGGTTGTAACCATACAGGTGTTGTTGGAGAAGGTTCCGAAGGTCTTAATGACAACCTTCTTGAAATACTCCAAAAAGAGAAAGTCAACATCAATATTGTTGGTGACTTTAAACTTAATGAAGAGATCGCCATTATTTTGGCATCTTTTTCTGCTTCCACAAGTGCTTTTGTGGAAACTGTGAAAGGTTTGGATTATAAAGCATTCAAACAAATTGTTGAATCCTGTGGTAATTTTAAAGTTACAAAAGGAAAAGCTAAAAAAGGTGCCTGGAATATTGGTGAACAGAAATCAATACTGAGTCCTCTTTATGCATTTGCATCAGAGGCTGCTCGTGTTGTACGATCAATTTTCTCCCGCACTCTTGAAACTGCTCAAAATTCTGTGCGTGTTTTACAGAAGGCCGCTATAACAATACTAGATGGAATTTCACAGTATTCACTGAGACTCATTGATGCTATGATGTTCACATCTGATTTGGCTACTAACAATCTAGTTGTAATGGCCTACATTACAGGTGGTGTTGTTCAGTTGACTTCGCAGTGGCTAACTAACATCTTTGGCACTGTTTATGAAAAACTCAAACCCGTCCTTGATTGGCTTGAAGAGAAGTTTAAGGAAGGTGTAGAGTTTCTTAGAGACGGTTGGGAAATTGTTAAATTTATCTCAACCTGTGCTTGTGAAATTGTCGGTGGACAAATTGTCACCTGTGCAAAGGAAATTAAGGAGAGTGTTCAGACATTCTTTAAGCTTGTAAATAAATTTTTGGCTTTGTGTGCTGACTCTATCATTATTGGTGGAGCTAAACTTAAAGCCTTGAATTTAGGTGAAACATTTGTCACGCACTCAAAGGGATTGTACAGAAAGTGTGTTAAATCCAGAGAAGAAACTGGCCTACTCATGCCTCTAAAAGCCCCAAAAGAAATTATCTTCTTAGAGGGAGAAACACTTCCCACAGAAGTGTTAACAGAGGAAGTTGTCTTGAAAACTGGTGATTTACAACCATTAGAACAACCTACTAGTGAAGCTGTTGAAGCTCCATTGGTTGGTACACCAGTTTGTATTAACGGGCTTATGTTGCTCGAAATCAAAGACACAGAAAAGTACTGTGCCCTTGCACCTAATATGATGGTAACAAACAATACCTTCACACTCAAAGGCGGTGCACCAACAAAGGTTACTTTTGGTGATGACACTGTGATAGAAGTGCAAGGTTACAAGAGTGTGAATATCACTTTTGAACTTGATGAAAGGATTGATAAAGTACTTAATGAGAAGTGCTCTGCCTATACAGTTGAACTCGGTACAGAAGTAAATGAGTTCGCCTGTGTTGTGGCAGATGCTGTCATAAAAACTTTGCAACCAGTATCTGAATTACTTACACCACTGGGCATTGATTTAGATGAGTGGAGTATGGCTACATACTACTTATTTGATGAGTCTGGTGAGTTTAAATTGGCTTCACATATGTATTGTTCTTTCTACCCTCCAGATGAGGATGAAGAAGAAGGTGATTGTGAAGAAGAAGAGTTTGAGCCATCAACTCAATATGAGTATGGTACTGAAGATGATTACCAAGGTAAACCTTTGGAATTTGGTGCCACTTCTGCTGCTCTTCAACCTGAAGAAGAGCAAGAAGAAGATTGGTTAGATGATGATAGTCAACAAACTGTTGGTCAACAAGACGGCAGTGAGGACAATCAGACAACTACTATTCAAACAATTGTTGAGGTTCAACCTCAATTAGAGATGGAACTTACACCAGTTGTTCAGACTATTGAAGTGAATAGTTTTAGTGGTTATTTAAAACTTACTGACAATGTATACATTAAAAATGCAGACATTGTGGAAGAAGCTAAAAAGGTAAAACCAACAGTGGTTGTTAATGCAGCCAATGTTTACCTTAAACATGGAGGAGGTGTTGCAGGAGCCTTAAATAAGGCTACTAACAATGCCATGCAAGTTGAATCTGATGATTACATAGCTACTAATGGACCACTTAAAGTGGGTGGTAGTTGTGTTTTAAGCGGACACAATCTTGCTAAACACTGTCTTCATGTTGTCGGCCCAAATGTTAACAAAGGTGAAGACATTCAACTTCTTAAGAGTGCTTATGAAAATTTTAATCAGCACGAAGTTCTACTTGCACCATTATTATCAGCTGGTATTTTTGGTGCTGACCCTATACATTCTTTAAGAGTTTGTGTAGATACTGTTCGCACAAATGTCTACTTAGCTGTCTTTGATAAAAATCTCTATGACAAACTTGTTTCAAGCTTTTTGGAAATGAAGAGTGAAAAGCAAGTTGAACAAAAGATCGCTGAGATTCCTAAAGAGGAAGTTAAGCCATTTATAACTGAAAGTAAACCTTCAGTTGAACAGAGAAAACAAGATGATAAGAAAATCAAAGCTTGTGTTGAAGAAGTTACAACAACTCTGGAAGAAACTAAGTTCCTCACAGAAAACTTGTTACTTTATATTGACATTAATGGCAATCTTCATCCAGATTCTGCCACTCTTGTTAGTGACATTGACATCACTTTCTTAAAGAAAGATGCTCCATATATAGTGGGTGATGTTGTTCAAGAGGGTGTTTTAACTGCTGTGGTTATACCTACTAAAAAGGCTGGTGGCACTACTGAAATGCTAGCGAAAGCTTTGAGAAAAGTGCCAACAGACAATTATATAACCACTTACCCGGGTCAGGGTTTAAATGGTTACACTGTAGAGGAGGCAAAGACAGTGCTTAAAAAGTGTAAAAGTGCCTTTTACATTCTACCATCTATTATCTCTAATGAGAAGCAAGAAATTCTTGGAACTGTTTCTTGGAATTTGCGAGAAATGCTTGCACATGCAGAAGAAACACGCAAATTAATGCCTGTCTGTGTGGAAACTAAAGCCATAGTTTCAACTATACAGCGTAAATATAAGGGTATTAAAATACAAGAGGGTGTGGTTGATTATGGTGCTAGATTTTACTTTTACACCAGTAAAACAACTGTAGCGTCACTTATCAACACACTTAACGATCTAAATGAAACTCTTGTTACAATGCCACTTGGCTATGTAACACATGGCTTAAATTTGGAAGAAGCTGCTCGGTATATGAGATCTCTCAAAGTGCCAGCTACAGTTTCTGTTTCTTCACCTGATGCTGTTACAGCGTATAATGGTTATCTTACTTCTTCTTCTAAAACACCTGAAGAACATTTTATTGAAACCATCTCACTTGCTGGTTCCTATAAAGATTGGTCCTATTCTGGACAATCTACACAACTAGGTATAGAATTTCTTAAGAGAGGTGATAAAAGTGTATATTACACTAGTAATCCTACCACATTCCACCTAGATGGTGAAGTTATCACCTTTGACAATCTTAAGACACTTCTTTCTTTGAGAGAAGTGAGGACTATTAAGGTGTTTACAACAGTAGACAACATTAACCTCCACACGCAAGTTGTGGACATGTCAATGACATATGGACAACAGTTTGGTCCAACTTATTTGGATGGAGCTGATGTTACTAAAATAAAACCTCATAATTCACATGAAGGTAAAACATTTTATGTTTTACCTAATGATGACACTCTACGTGTTGAGGCTTTTGAGTACTACCACACAACTGATCCTAGTTTTCTGGGTAGGTACATGTCAGCATTAAATCACACTAAAAAGTGGAAATACCCACAAGTTAATGGTTTAACTTCTATTAAATGGGCAGATAACAACTGTTATCTTGCCACTGCATTGTTAACACTCCAACAAATAGAGTTGAAGTTTAATCCACCTGCTCTACAAGATGCTTATTACAGAGCAAGGGCTGGTGAAGCTGCTAACTTTTGTGCACTTATCTTAGCCTACTGTAATAAGACAGTAGGTGAGTTAGGTGATGTTAGAGAAACAATGAGTTACTTGTTTCAACATGCCAATTTAGATTCTTGCAAAAGAGTCTTGAACGTGGTGTGTAAAACTTGTGGACAACAGCAGACAACCCTTAAGGGTGTAGAAGCTGTTATGTACATGGGCACACTTTCTTATGAACAATTTAAGAAAGGTGTTCAGATACCTTGTACGTGTGGTAAACAAGCTACAAAATATCTAGTACAACAGGAGTCACCTTTTGTTATGATGTCAGCACCACCTGCTCAGTATGAACTTAAGCATGGTACATTTACTTGTGCTAGTGAGTACACTGGTAATTACCAGTGTGGTCACTATAAACATATAACTTCTAAAGAAACTTTGTATTGCATAGACGGTGCTTTACTTACAAAGTCCTCAGAATACAAAGGTCCTATTACGGATGTTTTCTACAAAGAAAACAGTTACACAACAACCATAAAACCAGTTACTTATAAATTGGATGGTGTTGTTTGTACAGAAATTGACCCTAAGTTGGACAATTATTATAAGAAAGACAATTCTTATTTCACAGAGCAACCAATTGATCTTGTACCAAACCAACCATATCCAAACGCAAGCTTCGATAATTTTAAGTTTGTATGTGATAATATCAAATTTGCTGATGATTTAAACCAGTTAACTGGTTATAAGAAACCTGCTTCAAGAGAGCTTAAAGTTACATTTTTCCCTGACTTAAATGGTGATGTGGTGGCTATTGATTATAAACACTACACACCCTCTTTTAAGAAAGGAGCTAAATTGTTACATAAACCTATTGTTTGGCATGTTAACAATGCAACTAATAAAGCCACGTATAAACCAAATACCTGGTGTATACGTTGTCTTTGGAGCACAAAACCAGTTGAAACATCAAATTCGTTTGATGTACTGAAGTCAGAGGACGCGCAGGGAATGGATAATCTTGCCTGCGAAGATCTAAAACCAGTCTCTGAAGAAGTAGTGGAAAATCCTACCATACAGAAAGACGTTCTTGAGTGTAATGTGAAAACTACCGAAGTTGTAGGAGACATTATACTTAAACCAGCAAATAATAGTTTAAAAATTACAGAAGAGGTTGGCCACACAGATCTAATGGCTGCTTATGTAGACAATTCTAGTCTTACTATTAAGAAACCTAATGAATTATCTAGAGTATTAGGTTTGAAAACCCTTGCTACTCATGGTTTAGCTGCTGTTAATAGTGTCCCTTGGGATACTATAGCTAATTATGCTAAGCCTTTTCTTAACAAAGTTGTTAGTACAACTACTAACATAGTTACACGGTGTTTAAACCGTGTTTGTACTAATTATATGCCTTATTTCTTTACTTTATTGCTACAATTGTGTACTTTTACTAGAAGTACAAATTCTAGAATTAAAGCATCTATGCCGACTACTATAGCAAAGAATACTGTTAAGAGTGTCGGTAAATTTTGTCTAGAGGCTTCATTTAATTATTTGAAGTCACCTAATTTTTCTAAACTGATAAATATTATAATTTGGTTTTTACTATTAAGTGTTTGCCTAGGTTCTTTAATCTACTCAACCGCTGCTTTAGGTGTTTTAATGTCTAATTTAGGCATGCCTTCTTACTGTACTGGTTACAGAGAAGGCTATTTGAACTCTACTAATGTCACTATTGCAACCTACTGTACTGGTTCTATACCTTGTAGTGTTTGTCTTAGTGGTTTAGATTCTTTAGACACCTATCCTTCTTTAGAAACTATACAAATTACCATTTCATCTTTTAAATGGGATTTAACTGCTTTTGGCTTAGTTGCAGAGTGGTTTTTGGCATATATTCTTTTCACTAGGTTTTTCTATGTACTTGGATTGGCTGCAATCATGCAATTGTTTTTCAGCTATTTTGCAGTACATTTTATTAGTAATTCTTGGCTTATGTGGTTAATAATTAATCTTGTACAAATGGCCCCGATTTCAGCTATGGTTAGAATGTACATCTTCTTTGCATCATTTTATTATGTATGGAAAAGTTATGTGCATGTTGTAGACGGTTGTAATTCATCAACTTGTATGATGTGTTACAAACGTAATAGAGCAACAAGAGTCGAATGTACAACTATTGTTAATGGTGTTAGAAGGTCCTTTTATGTCTATGCTAATGGAGGTAAAGGCTTTTGCAAACTACACAATTGGAATTGTGTTAATTGTGATACATTCTGTGCTGGTAGTACATTTATTAGTGATGAAGTTGCGAGAGACTTGTCACTACAGTTTAAAAGACCAATAAATCCTACTGACCAGTCTTCTTACATCGTTGATAGTGTTACAGTGAAGAATGGTTCCATCCATCTTTACTTTGATAAAGCTGGTCAAAAGACTTATGAAAGACATTCTCTCTCTCATTTTGTTAACTTAGACAACCTGAGAGCTAATAACACTAAAGGTTCATTGCCTATTAATGTTATAGTTTTTGATGGTAAATCAAAATGTGAAGAATCATCTGCAAAATCAGCGTCTGTTTACTACAGTCAGCTTATGTGTCAACCTATACTGTTACTAGATCAGGCATTAGTGTCTGATGTTGGTGATAGTGCGGAAGTTGCAGTTAAAATGTTTGATGCTTACGTTAATACGTTTTCATCAACTTTTAACGTACCAATGGAAAAACTCAAAACACTAGTTGCAACTGCAGAAGCTGAACTTGCAAAGAATGTGTCCTTAGACAATGTCTTATCTACTTTTATTTCAGCAGCTCGGCAAGGGTTTGTTGATTCAGATGTAGAAACTAAAGATGTTGTTGAATGTCTTAAATTGTCACATCAATCTGACATAGAAGTTACTGGCGATAGTTGTAATAACTATATGCTCACCTATAACAAAGTTGAAAACATGACACCCCGTGACCTTGGTGCTTGTATTGACTGTAGTGCGCGTCATATTAATGCGCAGGTAGCAAAAAGTCACAACATTGCTTTGATATGGAACGTTAAAGATTTCATGTCATTGTCTGAACAACTACGAAAACAAATACGTAGTGCTGCTAAAAAGAATAACTTACCTTTTAAGTTGACATGTGCAACTACTAGACAAGTTGTTAATGTTGTAACAACAAAGATAGCACTTAAGGGTGGTAAAATTGTTAATAATTGGTTGAAGCAGTTAATTAAAGTTACACTTGTGTTCCTTTTTGTTGCTGCTATTTTCTATTTAATAACACCTGTTCATGTCATGTCTAAACATACTGACTTTTCAAGTGAAATCATAGGATACAAGGCTATTGATGGTGGTGTCACTCGTGACATAGCATCTACAGATACTTGTTTTGCTAACAAACATGCTGATTTTGACACATGGTTTAGCCAGCGTGGTGGTAGTTATACTAATGACAAAGCTTGCCCATTGATTGCTGCAGTCATAACAAGAGAAGTGGGTTTTGTCGTGCCTGGTTTGCCTGGCACGATATTACGCACAACTAATGGTGACTTTTTGCATTTCTTACCTAGAGTTTTTAGTGCAGTTGGTAACATCTGTTACACACCATCAAAACTTATAGAGTACACTGACTTTGCAACATCAGCTTGTGTTTTGGCTGCTGAATGTACAATTTTTAAAGATGCTTCTGGTAAGCCAGTACCATATTGTTATGATACCAATGTACTAGAAGGTTCTGTTGCTTATGAAAGTTTACGCCCTGACACACGTTATGTGCTCATGGATGGCTCTATTATTCAATTTCCTAACACCTACCTTGAAGGTTCTGTTAGAGTGGTAACAACTTTTGATTCTGAGTACTGTAGGCACGGCACTTGTGAAAGATCAGAAGCTGGTGTTTGTGTATCTACTAGTGGTAGATGGGTACTTAACAATGATTATTACAGATCTTTACCAGGAGTTTTCTGTGGTGTAGATGCTGTAAATTTACTTACTAATATGTTTACACCACTAATTCAACCTATTGGTGCTTTGGACATATCAGCATCTATAGTAGCTGGTGGTATTGTAGCTATCGTAGTAACATGCCTTGCCTACTATTTTATGAGGTTTAGAAGAGCTTTTGGTGAATACAGTCATGTAGTTGCCTTTAATACTTTACTATTCCTTATGTCATTCACTGTACTCTGTTTAACACCAGTTTACTCATTCTTACCTGGTGTTTATTCTGTTATTTACTTGTACTTGACATTTTATCTTACTAATGATGTTTCTTTTTTAGCACATATTCAGTGGATGGTTATGTTCACACCTTTAGTACCTTTCTGGATAACAATTGCTTATATCATTTGTATTTCCACAAAGCATTTCTATTGGTTCTTTAGTAATTACCTAAAGAGACGTGTAGTCTTTAATGGTGTTTCCTTTAGTACTTTTGAAGAAGCTGCGCTGTGCACCTTTTTGTTAAATAAAGAAATGTATCTAAAGTTGCGTAGTGATGTGCTATTACCTCTTACGCAATATAATAGATACTTAGCTCTTTATAATAAGTACAAGTATTTTAGTGGAGCAATGGATACAACTAGCTACAGAGAAGCTGCTTGTTGTCATCTCGCAAAGGCTCTCAATGACTTCAGTAACTCAGGTTCTGATGTTCTTTACCAACCACCACAAACCTCTATCACCTCAGCTGTTTTGCAGAGTGGTTTTAGAAAAATGGCATTCCCATCTGGTAAAGTTGAGGGTTGTATGGTACAAGTAACTTGTGGTACAACTACACTTAACGGTCTTTGGCTTGATGACGTAGTTTACTGTCCAAGACATGTGATCTGCACCTCTGAAGACATGCTTAACCCTAATTATGAAGATTTACTCATTCGTAAGTCTAATCATAATTTCTTGGTACAGGCTGGTAATGTTCAACTCAGGGTTATTGGACATTCTATGCAAAATTGTGTACTTAAGCTTAAGGTTGATACAGCCAATCCTAAGACACCTAAGTATAAGTTTGTTCGCATTCAACCAGGACAGACTTTTTCAGTGTTAGCTTGTTACAATGGTTCACCATCTGGTGTTTACCAATGTGCTATGAGGCCCAATTTCACTATTAAGGGTTCATTCCTTAATGGTTCATGTGGTAGTGTTGGTTTTAACATAGATTATGACTGTGTCTCTTTTTGTTACATGCACCATATGGAATTACCAACTGGAGTTCATGCTGGCACAGACTTAGAAGGTAACTTTTATGGACCTTTTGTTGACAGGCAAACAGCACAAGCAGCTGGTACGGACACAACTATTACAGTTAATGTTTTAGCTTGGTTGTACGCTGCTGTTATAAATGGAGACAGGTGGTTTCTCAATCGATTTACCACAACTCTTAATGACTTTAACCTTGTGGCTATGAAGTACAATTATGAACCTCTAACACAAGACCATGTTGACATACTAGGACCTCTTTCTGCTCAAACTGGAATTGCCGTTTTAGATATGTGTGCTTCATTAAAAGAATTACTGCAAAATGGTATGAATGGACGTACCATATTGGGTAGTGCTTTATTAGAAGATGAATTTACACCTTTTGATGTTGTTAGACAATGCTCAGGTGTTACTTTCCAAAGTGCAGTGAAAAGAACAATCAAGGGTACACACCACTGGTTGTTACTCACAATTTTGACTTCACTTTTAGTTTTAGTCCAGAGTACTCAATGGTCTTTGTTCTTTTTTTTGTATGAAAATGCCTTTTTACCTTTTGCTATGGGTATTATTGCTATGTCTGCTTTTGCAATGATGTTTGTCAAACATAAGCATGCATTTCTCTGTTTGTTTTTGTTACCTTCTCTTGCCACTGTAGCTTATTTTAATATGGTCTATATGCCTGCTAGTTGGGTGATGCGTATTATGACATGGTTGGATATGGTTGATACTAGTTTGTCTGGTTTTAAGCTAAAAGACTGTGTTATGTATGCATCAGCTGTAGTGTTACTAATCCTTATGACAGCAAGAACTGTGTATGATGATGGTGCTAGGAGAGTGTGGACACTTATGAATGTCTTGACACTCGTTTATAAAGTTTATTATGGTAATGCTTTAGATCAAGCCATTTCCATGTGGGCTCTTATAATCTCTGTTACTTCTAACTACTCAGGTGTAGTTACAACTGTCATGTTTTTGGCCAGAGGTATTGTTTTTATGTGTGTTGAGTATTGCCCTATTTTCTTCATAACTGGTAATACACTTCAGTGTATAATGCTAGTTTATTGTTTCTTAGGCTATTTTTGTACTTGTTACTTTGGCCTCTTTTGTTTACTCAACCGCTACTTTAGACTGACTCTTGGTGTTTATGATTACTTAGTTTCTACACAGGAGTTTAGATATATGAATTCACAGGGACTACTCCCACCCAAGAATAGCATAGATGCCTTCAAACTCAACATTAAATTGTTGGGTGTTGGTGGCAAACCTTGTATCAAAGTAGCCACTGTACAGTCTAAAATGTCAGATGTAAAGTGCACATCAGTAGTCTTACTCTCAGTTTTGCAACAACTCAGAGTAGAATCATCATCTAAATTGTGGGCTCAATGTGTCCAGTTACACAATGACATTCTCTTAGCTAAAGATACTACTGAAGCCTTTGAAAAAATGGTTTCACTACTTTCTGTTTTGCTTTCCATGCAGGGTGCTGTAGACATAAACAAGCTTTGTGAAGAAATGCTGGACAACAGGGCAACCTTACAAGCTATAGCCTCAGAGTTTAGTTCCCTTCCATCATATGCAGCTTTTGCTACTGCTCAAGAAGCTTATGAGCAGGCTGTTGCTAATGGTGATTCTGAAGTTGTTCTTAAAAAGTTGAAGAAGTCTTTGAATGTGGCTAAATCTGAATTTGACCGTGATGCAGCCATGCAACGTAAGTTGGAAAAGATGGCTGATCAAGCTATGACCCAAATGTATAAACAGGCTAGATCTGAGGACAAGAGGGCAAAAGTTACTAGTGCTATGCAGACAATGCTTTTCACTATGCTTAGAAAGTTGGATAATGATGCACTCAACAACATTATCAACAATGCAAGAGATGGTTGTGTTCCCTTGAACATAATACCTCTTACAACAGCAGCCAAACTAATGGTTGTCATACCAGACTATAACACATATAAAAATACGTGTGATGGTACAACATTTACTTATGCATCAGCATTGTGGGAAATCCAACAGGTTGTAGATGCAGATAGTAAAATTGTTCAACTTAGTGAAATTAGTATGGACAATTCACCTAATTTAGCATGGCCTCTTATTGTAACAGCTTTAAGGGCCAATTCTGCTGTCAAATTACAGAATAATGAGCTTAGTCCTGTTGCACTACGACAGATGTCTTGTGCTGCCGGTACTACACAAACTGCTTGCACTGATGACAATGCGTTAGCTTACTACAACACAACAAAGGGAGGTAGGTTTGTACTTGCACTGTTATCCGATTTACAGGATTTGAAATGGGCTAGATTCCCTAAGAGTGATGGAACTGGTACTATCTATACAGAACTGGAACCACCTTGTAGGTTTGTTACAGACACACCTAAAGGTCCTAAAGTGAAGTATTTATACTTTATTAAAGGATTAAACAACCTAAATAGAGGTATGGTACTTGGTAGTTTAGCTGCCACAGTACGTCTACAAGCTGGTAATGCAACAGAAGTGCCTGCCAATTCAACTGTATTATCTTTCTGTGCTTTTGCTGTAGATGCTGCTAAAGCTTACAAAGATTATCTAGCTAGTGGGGGACAACCAATCACTAATTGTGTTAAGATGTTGTGTACACACACTGGTACTGGTCAGGCAATAACAGTTACACCGGAAGCCAATATGGATCAAGAATCCTTTGGTGGTGCATCGTGTTGTCTGTACTGCCGTTGCCACATAGATCATCCAAATCCTAAAGGATTTTGTGACTTAAAAGGTAAGTATGTACAAATACCTACAACTTGTGCTAATGACCCTGTGGGTTTTACACTTAAAAACACAGTCTGTACCGTCTGCGGTATGTGGAAAGGTTATGGCTGTAGTTGTGATCAACTCCGCGAACCCATGCTTCAGTCAGCTGATGCACAATCGTTTTTAAACGGGTTTGCGGTGTAAGTGCAGCCCGTCTTACACCGTGCGGCACAGGCACTAGTACTGATGTCGTATACAGGGCTTTTGACATCTACAATGATAAAGTAGCTGGTTTTGCTAAATTCCTAAAAACTAATTGTTGTCGCTTCCAAGAAAAGGACGAAGATGACAATTTAATTGATTCTTACTTTGTAGTTAAGAGACACACTTTCTCTAACTACCAACATGAAGAAACAATTTATAATTTACTTAAGGATTGTCCAGCTGTTGCTAAACATGACTTCTTTAAGTTTAGAATAGACGGTGACATGGTACCACATATATCACGTCAACGTCTTACTAAATACACAATGGCAGACCTCGTCTATGCTTTAAGGCATTTTGATGAAGGTAATTGTGACACATTAAAAGAAATACTTGTCACATACAATTGTTGTGATGATGATTATTTCAATAAAAAGGACTGGTATGATTTTGTAGAAAACCCAGATATATTACGCGTATACGCCAACTTAGGTGAACGTGTACGCCAAGCTTTGTTAAAAACAGTACAATTCTGTGATGCCATGCGAAATGCTGGTATTGTTGGTGTACTGACATTAGATAATCAAGATCTCAATGGTAACTGGTATGATTTCGGTGATTTCATACAAACCACGCCAGGTAGTGGAGTTCCTGTTGTAGATTCTTATTATTCATTGTTAATGCCTATATTAACCTTGACCAGGGCTTTAACTGCAGAGTCACATGTTGACACTGACTTAACAAAGCCTTACATTAAGTGGGATTTGTTAAAATATGACTTCACGGAAGAGAGGTTAAAACTCTTTGACCGTTATTTTAAATATTGGGATCAGACATACCACCCAAATTGTGTTAACTGTTTGGATGACAGATGCATTCTGCATTGTGCAAACTTTAATGTTTTATTCTCTACAGTGTTCCCACCTACAAGTTTTGGACCACTAGTGAGAAAAATATTTGTTGATGGTGTTCCATTTGTAGTTTCAACTGGATACCACTTCAGAGAGCTAGGTGTTGTACATAATCAGGATGTAAACTTACATAGCTCTAGACTTAGTTTTAAGGAATTACTTGTGTATGCTGCTGACCCTGCTATGCACGCTGCTTCTGGTAATCTATTACTAGATAAACGCACTACGTGCTTTTCAGTAGCTGCACTTACTAACAATGTTGCTTTTCAAACTGTCAAACCCGGTAATTTTAACAAAGACTTCTATGACTTTGCTGTGTCTAAGGGTTTCTTTAAGGAAGGAAGTTCTGTTGAATTAAAACACTTCTTCTTTGCTCAGGATGGTAATGCTGCTATCAGCGATTATGACTACTATCGTTATAATCTACCAACAATGTGTGATATCAGACAACTACTATTTGTAGTTGAAGTTGTTGATAAGTACTTTGATTGTTACGATGGTGGCTGTATTAATGCTAACCAAGTCATCGTCAACAACCTAGACAAATCAGCTGGTTTTCCATTTAATAAATGGGGTAAGGCTAGACTTTATTATGATTCAATGAGTTATGAGGATCAAGATGCACTTTTCGCATATACAAAACGTAATGTCATCCCTACTATAACTCAAATGAATCTTAAGTATGCCATTAGTGCAAAGAATAGAGCTCGCACCGTAGCTGGTGTCTCTATCTGTAGTACTATGACCAATAGACAGTTTCATCAAAAATTATTGAAATCAATAGCCGCCACTAGAGGAGCTACTGTAGTAATTGGAACAAGCAAATTCTATGGTGGTTGGCACAACATGTTAAAAACTGTTTATAGTGATGTAGAAAACCCTCACCTTATGGGTTGGGATTATCCTAAATGTGATAGAGCCATGCCTAACATGCTTAGAATTATGGCCTCACTTGTTCTTGCTCGCAAACATACAACGTGTTGTAGCTTGTCACACCGTTTCTATAGATTAGCTAATGAGTGTGCTCAAGTATTGAGTGAAATGGTCATGTGTGGCGGTTCACTATATGTTAAACCAGGTGGAACCTCATCAGGAGATGCCACAACTGCTTATGCTAATAGTGTTTTTAACATTTGTCAAGCTGTCACGGCCAATGTTAATGCACTTTTATCTACTGATGGTAACAAAATTGCCGATAAGTATGTCCGCAATTTACAACACAGACTTTATGAGTGTCTCTATAGAAATAGAGATGTTGACACAGACTTTGTGAATGAGTTTTACGCATATTTGCGTAAACATTTCTCAATGATGATACTCTCTGACGATGCTGTTGTGTGTTTCAATAGCACTTATGCATCTCAAGGTCTAGTGGCTAGCATAAAGAACTTTAAGTCAGTTCTTTATTATCAAAACAATGTTTTTATGTCTGAAGCAAAATGTTGGACTGAGACTGACCTTACTAAAGGACCTCATGAATTTTGCTCTCAACATACAATGCTAGTTAAACAGGGTGATGATTATGTGTACCTTCCTTACCCAGATCCATCAAGAATCCTAGGGGCCGGCTGTTTTGTAGATGATATCGTAAAAACAGATGGTACACTTATGATTGAACGGTTCGTGTCTTTAGCTATAGATGCTTACCCACTTACTAAACATCCTAATCAGGAGTATGCTGATGTCTTTCATTTGTACTTACAATACATAAGAAAGCTACATGATGAGTTAACAGGACACATGTTAGACATGTATTCTGTTATGCTTACTAATGATAACACTTCAAGGTATTGGGAACCTGAGTTTTATGAGGCTATGTACACACCGCATACAGTCTTACAGGCTGTTGGGGCTTGTGTTCTTTGCAATTCACAGACTTCATTAAGATGTGGTGCTTGCATACGTAGACCATTCTTATGTTGTAAATGCTGTTACGACCATGTCATATCAACATCACATAAATTAGTCTTGTCTGTTAATCCGTATGTTTGCAATGCTCCAGGTTGTGATGTCACAGATGTGACTCAACTTTACTTAGGAGGTATGAGCTATTATTGTAAATCACATAAACCACCCATTAGTTTTCCATTGTGTGCTAATGGACAAGTTTTTGGTTTATATAAAAATACATGTGTTGGTAGCGATAATGTTACTGACTTTAATGCAATTGCAACATGTGACTGGACAAATGCTGGTGATTACATTTTAGCTAACACCTGTACTGAAAGACTCAAGCTTTTTGCAGCAGAAACGCTCAAAGCTACTGAGGAGACATTTAAACTGTCTTATGGTATTGCTACTGTACGTGAAGTGCTGTCTGACAGAGAATTACATCTTTCATGGGAAGTTGGTAAACCTAGACCACCACTTAACCGAAATTATGTCTTTACTGGTTATCGTGTAACTAAAAACAGTAAAGTACAAATAGGAGAGTACACCTTTGAAAAAGGTGACTATGGTGATGCTGTTGTTTACCGAGGTACAACAACTTACAAATTAAATGTTGGTGATTATTTTGTGCTGACATCACATACAGTAATGCCATTAAGTGCACCTACACTAGTGCCACAAGAGCACTATGTTAGAATTACTGGCTTATACCCAACACTCAATATCTCAGATGAGTTTTCTAGCAATGTTGCAAATTATCAAAAGGTTGGTATGCAAAAGTATTCTACACTCCAGGGACCACCTGGTACTGGTAAGAGTCATTTTGCTATTGGCCTAGCTCTCTACTACCCTTCTGCTCGCATAGTGTATACAGCTTGCTCTCATGCCGCTGTTGATGCACTATGTGAGAAGGCATTAAAATATTTGCCTATAGATAAATGTAGTAGAATTATACCTGCACGTGCTCGTGTAGAGTGTTTTGATAAATTCAAAGTGAATTCAACATTAGAACAGTATGTCTTTTGTACTGTAAATGCATTGCCTGAGACGACAGCAGATATAGTTGTCTTTGATGAAATTTCAATGGCCACAAATTATGATTTGAGTGTTGTCAATGCCAGATTACGTGCTAAGCACTATGTGTACATTGGCGACCCTGCTCAATTACCTGCACCACGCACATTGCTAACTAAGGGCACACTAGAACCAGAATATTTCAATTCAGTGTGTAGACTTATGAAAACTATAGGTCCAGACATGTTCCTCGGAACTTGTCGGCGTTGTCCTGCTGAAATTGTTGACACTGTGAGTGCTTTGGTTTATGATAATAAGCTTAAAGCACATAAAGACAAATCAGCTCAATGCTTTAAAATGTTTTATAAGGGTGTTATCACGCATGATGTTTCATCTGCAATTAACAGGCCACAAATAGGCGTGGTAAGAGAATTCCTTACACGTAACCCTGCTTGGAGAAAAGCTGTCTTTATTTCACCTTATAATTCACAGAATGCTGTAGCCTCAAAGATTTTGGGACTACCAACTCAAACTGTTGATTCATCACAGGGCTCAGAATATGACTATGTCATATTCACTCAAACCACTGAAACAGCTCACTCTTGTAATGTAAACAGATTTAATGTTGCTATTACCAGAGCAAAAGTAGGCATACTTTGCATAATGTCTGATAGAGACCTTTATGACAAGTTGCAATTTACAAGTCTTGAAATTCCACGTAGGAATGTGGCAACTTTACAAGCTGAAAATGTAACAGGACTCTTTAAAGATTGTAGTAAGGTAATCACTGGGTTACATCCTACACAGGCACCTACACACCTCAGTGTTGACACTAAATTCAAAACTGAAGGTTTATGTGTTGACATACCTGGCATACCTAAGGACATGACCTATAGAAGACTCATCTCTATGATGGGTTTTAAAATGAATTATCAAGTTAATGGTTACCCTAACATGTTTATCACCCGCGAAGAAGCTATAAGACATGTACGTGCATGGATTGGCTTCGATGTCGAGGGGTGTCATGCTACTAGAGAAGCTGTTGGTACCAATTTACCTTTACAGCTAGGTTTTTCTACAGGTGTTAACCTAGTTGCTGTACCTACAGGTTATGTTGATACACCTAATAATACAGATTTTTCCAGAGTTAGTGCTAAACCACCGCCTGGAGATCAATTTAAACACCTCATACCACTTATGTACAAAGGACTTCCTTGGAATGTAGTGCGTATAAAGATTGTACAAATGTTAAGTGACACACTTAAAAATCTCTCTGACAGAGTCGTATTTGTCTTATGGGCACATGGCTTTGAGTTGACATCTATGAAGTATTTTGTGAAAATAGGACCTGAGCGCACCTGTTGTCTATGTGATAGACGTGCCACATGCTTTTCCACTGCTTCAGACACTTATGCCTGTTGGCATCATTCTATTGGATTTGATTACGTCTATAATCCGTTTATGATTGATGTTCAACAATGGGGTTTTACAGGTAACCTACAAAGCAACCATGATCTGTATTGTCAAGTCCATGGTAATGCACATGTAGCTAGTTGTGATGCAATCATGACTAGGTGTCTAGCTGTCCACGAGTGCTTTGTTAAGCGTGTTGACTGGACTATTGAATATCCTATAATTGGTGATGAACTGAAGATTAATGCGGCTTGTAGAAAGGTTCAACACATGGTTGTTAAAGCTGCATTATTAGCAGACAAATTCCCAGTTCTTCACGACATTGGTAACCCTAAAGCTATTAAGTGTGTACCTCAAGCTGATGTAGAATGGAAGTTCTATGATGCACAGCCTTGTAGTGACAAAGCTTATAAAATAGAAGAATTATTCTATTCTTATGCCACACATTCTGACAAATTCACAGATGGTGTATGCCTATTTTGGAATTGCAATGTCGATAGATATCCTGCTAATTCCATTGTTTGTAGATTTGACACTAGAGTGCTATCTAACCTTAACTTGCCTGGTTGTGATGGTGGCAGTTTGTATGTAAATAAACATGCATTCCACACACCAGCTTTTGATAAAAGTGCTTTTGTTAATTTAAAACAATTACCATTTTTCTATTACTCTGACAGTCCATGTGAGTCTCATGGAAAACAAGTAGTGTCAGATATAGATTATGTACCACTAAAGTCTGCTACGTGTATAACACGTTGCAATTTAGGTGGTGCTGTCTGTAGACATCATGCTAATGAGTACAGATTGTATCTCGATGCTTATAACATGATGATCTCAGCTGGCTTTAGCTTGTGGGTTTACAAACAATTTGATACTTATAACCTCTGGAACACTTTTACAAGACTTCAGAGTTTAGAAAATGTGGCTTTTAATGTTGTAAATAAGGGACACTTTGATGGACAACAGGGTGAAGTACCAGTTTCTATCATTAATAACACTGTTTACACAAAAGTTGATGGTGTTGATGTAGAATTGTTTGAAAATAAAACAACATTACCTGTTAATGTAGCATTTGAGCTTTGGGCTAAGCGCAACATTAAACCAGTACCAGAGGTGAAAATACTCAATAATTTGGGTGTGGACATTGCTGCTAATACTGTGATCTGGGACTACAAAAGAGATGCTCCAGCACATATATCTACTATTGGTGTTTGTTCTATGACTGACATAGCCAAGAAACCAACTGAAACGATTTGTGCACCACTCACTGTCTTTTTTGATGGTAGAGTTGATGGTCAAGTAGACTTATTTAGAAATGCCCGTAATGGTGTTCTTATTACAGAAGGTAGTGTTAAAGGTTTACAACCATCTGTAGGTCCCAAACAAGCTAGTCTTAATGGAGTCACATTAATTGGAGAAGCCGTAAAAACACAGTTCAATTATTATAAGAAAGTTGATGGTGTTGTCCAACAATTACCTGAAACTTACTTTACTCAGAGTAGAAATTTACAAGAATTTAAACCCAGGAGTCAAATGGAAATTGATTTCTTAGAATTAGCTATGGATGAATTCATTGAACGGTATAAATTAGAAGGCTATGCCTTCGAACATATCGTTTATGGAGATTTTAGTCATAGTCAGTTAGGTGGTTTACATCTACTGATTGGACTAGCTAAACGTTTTAAGGAATCACCTTTTGAATTAGAAGATTTTATTCCTATGGACAGTACAGTTAAAAACTATTTCATAACAGATGCGCAAACAGGTTCATCTAAGTGTGTGTGTTCTGTTATTGATTTATTACTTGATGATTTTGTTGAAATAATAAAATCCCAAGATTTATCTGTAGTTTCTAAGGTTGTCAAAGTGACTATTGACTATACAGAAATTTCATTTATGCTTTGGTGTAAAGATGGCCATGTAGAAACATTTTACCCAAAATTACAATCTAGTCAAGCGTGGCAACCGGGTGTTGCTATGCCTAATCTTTACAAAATGCAAAGAATGCTATTAGAAAAGTGTGACCTTCAAAATTATGGTGATAGTGCAACATTACCTAAAGGCATAATGATGAATGTCGCAAAATATACTCAACTGTGTCAATATTTAAACACATTAACATTAGCTGTACCCTATAATATGAGAGTTATACATTTTGGTGCTGGTTCTGATAAAGGAGTTGCACCAGGTACAGCTGTTTTAAGACAGTGGTTGCCTACGGGTACGCTGCTTGTCGATTCAGATCTTAATGACTTTGTCTCTGATGCAGATTCAACTTTGATTGGTGATTGTGCAACTGTACATACAGCTAATAAATGGGATCTCATTATTAGTGATATGTACGACCCTAAGACTAAAAATGTTACAAAAGAAAATGACTCTAAAGAGGGTTTTTTCACTTACATTTGTGGGTTTATACAACAAAAGCTAGCTCTTGGAGGTTCCGTGGCTATAAAGATAACAGAACATTCTTGGAATGCTGATCTTTATAAGCTCATGGGACACTTCGCATGGTGGACAGCCTTTGTTACTAATGTGAATGCGTCATCATCTGAAGCATTTTTAATTGGATGTAATTATCTTGGCAAACCACGCGAACAAATAGATGGTTATGTCATGCATGCAAATTACATATTTTGGAGGAATACAAATCCAATTCAGTTGTCTTCCTATTCTTTATTTGACATGAGTAAATTTCCCCTTAAATTAAGGGGTACTGCTGTTATGTCTTTAAAAGAAGGTCAAATCAATGATATGATTTTATCTCTTCTTAGTAAAGGTAGACTTATAATTAGAGAAAACAACAGAGTTGTTATTTCTAGTGATGTTCTTGTTAACAACTAAACGAACAATGTTTGTTTTTCTTGTTTTATTGCCACTAGTCTCTAGTCAGTGTGTTAATCTTACAACCAGAACTCAATTACCCCCTGCATACACTAATTCTTTCACACGTGGTGTTTATTACCCTGACAAAGTTTTCAGATCCTCAGTTTTACATTCAACTCAGGACTTGTTCTTACCTTTCTTTTCCAATGTTACTTGGTTCCATGCTATACATGTCTCTGGGACCAATGGTACTAAGAGGTTTGATAACCCTGTCCTACCATTTAATGATGGTGTTTATTTTGCTTCCACTGAGAAGTCTAACATAATAAGAGGCTGGATTTTTGGTACTACTTTAGATTCGAAGACCCAGTCCCTACTTATTGTTAATAACGCTACTAATGTTGTTATTAAAGTCTGTGAATTTCAATTTTGTAATGATCCATTTTTGGGTGTTTATTACCACAAAAACAACAAAAGTTGGATGGAAAGTGAGTTCAGAGTTTATTCTAGTGCGAATAATTGCACTTTTGAATATGTCTCTCAGCCTTTTCTTATGGACCTTGAAGGAAAACAGGGTAATTTCAAAAATCTTAGGGAATTTGTGTTTAAGAATATTGATGGTTATTTTAAAATATATTCTAAGCACACGCCTATTAATTTAGTGCGTGATCTCCCTCAGGGTTTTTCGGCTTTAGAACCATTGGTAGATTTGCCAATAGGTATTAACATCACTAGGTTTCAAACTTTACTTGCTTTACATAGAAGTTATTTGACTCCTGGTGATTCTTCTTCAGGTTGGACAGCTGGTGCTGCAGCTTATTATGTGGGTTATCTTCAACCTAGGACTTTTCTATTAAAATATAATGAAAATGGAACCATTACAGATGCTGTAGACTGTGCACTTGACCCTCTCTCAGAAACAAAGTGTACGTTGAAATCCTTCACTGTAGAAAAAGGAATCTATCAAACTTCTAACTTTAGAGTCCAACCAACAGAATCTATTGTTAGATTTCCTAATATTACAAACTTGTGCCCTTTTGGTGAAGTTTTTAACGCCACCAGATTTGCATCTGTTTATGCTTGGAACAGGAAGAGAATCAGCAACTGTGTTGCTGATTATTCTGTCCTATATAATTCCGCATCATTTTCCACTTTTAAGTGTTATGGAGTGTCTCCTACTAAATTAAATGATCTCTGCTTTACTAATGTCTATGCAGATTCATTTGTAATTAGAGGTGATGAAGTCAGACAAATCGCTCCAGGGCAAACTGGAAAGATTGCTGATTATAATTATAAATTACCAGATGATTTTACAGGCTGCGTTATAGCTTGGAATTCTAACAATCTTGATTCTAAGGTTGGTGGTAATTATAATTACCTGTATAGATTGTTTAGGAAGTCTAATCTCAAACCTTTTGAGAGAGATATTTCAACTGAAATCTATCAGGCCGGTAGCACACCTTGTAATGGTGTTGAAGGTTTTAATTGTTACTTTCCTTTACAATCATATGGTTTCCAACCCACTAATGGTGTTGGTTACCAACCATACAGAGTAGTAGTACTTTCTTTTGAACTTCTACATGCACCAGCAACTGTTTGTGGACCTAAAAAGTCTACTAATTTGGTTAAAAACAAATGTGTCAATTTCAACTTCAATGGTTTAACAGGCACAGGTGTTCTTACTGAGTCTAACAAAAAGTTTCTGCCTTTCCAACAATTTGGCAGAGACATTGCTGACACTACTGATGCTGTCCGTGATCCACAGACACTTGAGATTCTTGACATTACACCATGTTCTTTTGGTGGTGTCAGTGTTATAACACCAGGAACAAATACTTCTAACCAGGTTGCTGTTCTTTATCAGGATGTTAACTGCACAGAAGTCCCTGTTGCTATTCATGCAGATCAACTTACTCCTACTTGGCGTGTTTATTCTACAGGTTCTAATGTTTTTCAAACACGTGCAGGCTGTTTAATAGGGGCTGAACATGTCAACAACTCATATGAGTGTGACATACCCATTGGTGCAGGTATATGCGCTAGTTATCAGACTCAGACTAATTCTCCTCGGCGGGCACGTAGTGTAGCTAGTCAATCCATCATTGCCTACACTATGTCACTTGGTGCAGAAAATTCAGTTGCTTACTCTAATAACTCTATTGCCATACCCACAAATTTTACTATTAGTGTTACCACAGAAATTCTACCAGTGTCTATGACCAAGACATCAGTAGATTGTACAATGTACATTTGTGGTGATTCAACTGAATGCAGCAATCTTTTGTTGCAATATGGCAGTTTTTGTACACAATTAAACCGTGCTTTAACTGGAATAGCTGTTGAACAAGACAAAAACACCCAAGAAGTTTTTGCACAAGTCAAACAAATTTACAAAACACCACCAATTAAAGATTTTGGTGGTTTTAATTTTTCACAAATATTACCAGATCCATCAAAACCAAGCAAGAGGTCATTTATTGAAGATCTACTTTTCAACAAAGTGACACTTGCAGATGCTGGCTTCATCAAACAATATGGTGATTGCCTTGGTGATATTGCTGCTAGAGACCTCATTTGTGCACAAAAGTTTAACGGCCTTACTGTTTTGCCACCTTTGCTCACAGATGAAATGATTGCTCAATACACTTCTGCACTGTTAGCGGGTACAATCACTTCTGGTTGGACCTTTGGTGCAGGTGCTGCATTACAAATACCATTTGCTATGCAAATGGCTTATAGGTTTAATGGTATTGGAGTTACACAGAATGTTCTCTATGAGAACCAAAAATTGATTGCCAACCAATTTAATAGTGCTATTGGCAAAATTCAAGACTCACTTTCTTCCACAGCAAGTGCACTTGGAAAACTTCAAGATGTGGTCAACCAAAATGCACAAGCTTTAAACACGCTTGTTAAACAACTTAGCTCCAATTTTGGTGCAATTTCAAGTGTTTTAAATGATATCCTTTCACGTCTTGACAAAGTTGAGGCTGAAGTGCAAATTGATAGGTTGATCACAGGCAGACTTCAAAGTTTGCAGACATATGTGACTCAACAATTAATTAGAGCTGCAGAAATCAGAGCTTCTGCTAATCTTGCTGCTACTAAAATGTCAGAGTGTGTACTTGGACAATCAAAAAGAGTTGATTTTTGTGGAAAGGGCTATCATCTTATGTCCTTCCCTCAGTCAGCACCTCATGGTGTAGTCTTCTTGCATGTGACTTATGTCCCTGCACAAGAAAAGAACTTCACAACTGCTCCTGCCATTTGTCATGATGGAAAAGCACACTTTCCTCGTGAAGGTGTCTTTGTTTCAAATGGCACACACTGGTTTGTAACACAAAGGAATTTTTATGAACCACAAATCATTACTACAGACAACACATTTGTGTCTGGTAACTGTGATGTTGTAATAGGAATTGTCAACAACACAGTTTATGATCCTTTGCAACCTGAATTAGACTCATTCAAGGAGGAGTTAGATAAATATTTTAAGAATCATACATCACCAGATGTTGATTTAGGTGACATCTCTGGCATTAATGCTTCAGTTGTAAACATTCAAAAAGAAATTGACCGCCTCAATGAGGTTGCCAAGAATTTAAATGAATCTCTCATCGATCTCCAAGAACTTGGAAAGTATGAGCAGTATATAAAATGGCCATGGTACATTTGGCTAGGTTTTATAGCTGGCTTGATTGCCATAGTAATGGTGACAATTATGCTTTGCTGTATGACCAGTTGCTGTAGTTGTCTCAAGGGCTGTTGTTCTTGTGGATCCTGCTGCAAATTTGATGAAGACGACTCTGAGCCAGTGCTCAAAGGAGTCAAATTACATTACACATAAACGAACTTATGGATTTGTTTATGAGAATCTTCACAATTGGAACTGTAACTTTGAAGCAAGGTGAAATCAAGGATGCTACTCCTTCAGATTTTGTTCGCGCTACTGCAACGATACCGATACAAGCCTCACTCCCTTTCGGATGGCTTATTGTTGGCGTTGCACTTCTTGCTGTTTTTCAGAGCGCTTCCAAAATCATAACCCTCAAAAAGAGATGGCAACTAGCACTCTCCAAGGGTGTTCACTTTGTTTGCAACTTGCTGTTGTTGTTTGTAACAGTTTACTCACACCTTTTGCTCGTTGCTGCTGGCCTTGAAGCCCCTTTTCTCTATCTTTATGCTTTAGTCTACTTCTTGCAGAGTATAAACTTTGTAAGAATAATAATGAGGCTTTGGCTTTGCTGGAAATGCCGTTCCAAAAACCCATTACTTTATGATGCCAACTATTTTCTTTGCTGGCATACTAATTGTTACGACTATTGTATACCTTACAATAGTGTAACTTCTTCAATTGTCATTACTTCAGGTGATGGCACAACAAGTCCTATTTCTGAACATGACTACCAGATTGGTGGTTATACTGAAAAATGGGAATCTGGAGTAAAAGACTGTGTTGTATTACACAGTTACTTCACTTCAGACTATTACCAGCTGTACTCAACTCAATTGAGTACAGACACTGGTGTTGAACATGTTACCTTCTTCATCTACAATAAAATTGTTGATGAGCCTGAAGAACATGTCCAAATTCACACAATCGACGGTTCATCCGGAGTTGTTAATCCAGTAATGGAACCAATTTATGATGAACCGACGACGACTACTAGCGTGCCTTTGTAAGCACAAGCTGATGAGTACGAACTTATGTACTCATTCGTTTCGGAAGAGACAGGTACGTTAATAGTTAATAGCGTACTTCTTTTTCTTGCTTTCGTGGTATTCTTGCTAGTTACACTAGCCATCCTTACTGCGCTTCGATTGTGTGCGTACTGCTGCAATATTGTTAACGTGAGTCTTGTAAAACCTTCTTTTTACGTTTACTCTCGTGTTAAAAATCTGAATTCTTCTAGAGTTCCTGATCTTCTGGTCTAAACGAACTAAATATTATATTAGTTTTTCTGTTTGGAACTTTAATTTTAGCCATGGCAGATTCCAACGGTACTATTACCGTTGAAGAGCTTAAAAAGCTCCTTGAACAATGGAACCTAGTAATAGGTTTCCTATTCCTTACATGGATTTGTCTTCTACAATTTGCCTATGCCAACAGGAATAGGTTTTTGTATATAATTAAGTTAATTTTCCTCTGGCTGTTATGGCCAGTAACTTTAGCTTGTTTTGTGCTTGCTGCTGTTTACAGAATAAATTGGATCACCGGTGGAATTGCTATCGCAATGGCTTGTCTTGTAGGCTTGATGTGGCTCAGCTACTTCATTGCTTCTTTCAGACTGTTTGCGCGTACGCGTTCCATGTGGTCATTCAATCCAGAAACTAACATTCTTCTCAACGTGCCACTCCATGGCACTATTCTGACCAGACCGCTTCTAGAAAGTGAACTCGTAATCGGAGCTGTGATCCTTCGTGGACATCTTCGTATTGCTGGACACCATCTAGGACGCTGTGACATCAAGGACCTGCCTAAAGAAATCACTGTTGCTACATCACGAACGCTTTCTTATTACAAATTGGGAGCTTCGCAGCGTGTAGCAGGTGACTCAGGTTTTGCTGCATACAGTCGCTACAGGATTGGCAACTATAAATTAAACACAGACCATTCCAGTAGCAGTGACAATATTGCTTTGCTTGTACAGTAAGTGACAACAGATGTTTCATCTCGTTGACTTTCAGGTTACTATAGCAGAGATATTACTAATTATTATGAGGACTTTTAAAGTTTCCATTTGGAATCTTGATTACATCATAAACCTCATAATTAAAAATTTATCTAAGTCACTAACTGAGAATAAATATTCTCAATTAGATGAAGAGCAACCAATGGAGATTGATTAAACGAACATGAAAATTATTCTTTTCTTGGCACTGATAACACTCGCTACTTGTGAGCTTTATCACTACCAAGAGTGTGTTAGAGGTACAACAGTACTTTTAAAAGAACCTTGCTCTTCTGGAACATACGAGGGCAATTCACCATTTCATCCTCTAGCTGATAACAAATTTGCACTGACTTGCTTTAGCACTCAATTTGCTTTTGCTTGTCCTGACGGCGTAAAACACGTCTATCAGTTACGTGCCAGATCAGTTTCACCTAAACTGTTCATCAGACAAGAGGAAGTTCAAGAACTTTACTCTCCAATTTTTCTTATTGTTGCGGCAATAGTGTTTATAACACTTTGCTTCACACTCAAAAGAAAGACAGAATGATTGAACTTTCATTAATTGACTTCTATTTGTGCTTTTTAGCCTTTCTGCTATTCCTTGTTTTAATTATGCTTATTATCTTTTGGTTCTCACTTGAACTGCAAGATCATAATGAAACTTGTCACGCCTAAACGAACATGAAATTTCTTGTTTTCTTAGGAATCATCACAACTGTAGCTGCATTTCACCAAGAATGTAGTTTACAGTCATGTACTCAACATCAACCATATGTAGTTGATGACCCGTGTCCTATTCACTTCTATTCTAAATGGTATATTAGAGTAGGAGCTAGAAAATCAGCACCTTTAATTGAATTGTGCGTGGATGAGGCTGGTTCTAAATCACCCATTCAGTACATCGATATCGGTAATTATACAGTTTCCTGTTTACCTTTTACAATTAATTGCCAGGAACCTAAATTGGGTAGTCTTGTAGTGCGTTGTTCGTTCTATGAAGACTTTTTAGAGTATCATGACGTTCGTGTTGTTTTAGATTTCATCTAAACGAACAAACTAAAATGTCTGATAATGGACCCCAAAATCAGCGAAATGCACCCCGCATTACGTTTGGTGGACCCTCAGATTCAACTGGCAGTAACCAGAATGGAGAACGCAGTGGGGCGCGATCAAAACAACGTCGGCCCCAAGGTTTACCCAATAATACTGCGTCTTGGTTCACCGCTCTCACTCAACATGGCAAGGAAGACCTTAAATTCCCTCGAGGACAAGGCGTTCCAATTAACACCAATAGCAGTCCAGATGACCAAATTGGCTACTACCGAAGAGCTACCAGACGAATTCGTGGTGGTGACGGTAAAATGAAAGATCTCAGTCCAAGATGGTATTTCTACTACCTAGGAACTGGGCCAGAAGCTGGACTTCCCTATGGTGCTAACAAAGACGGCATCATATGGGTTGCAACTGAGGGAGCCTTGAATACACCAAAAGATCACATTGGCACCCGCAATCCTGCTAACAATGCTGCAATCGTGCTACAACTTCCTCAAGGAACAACATTGCCAAAAGGCTTCTACGCAGAAGGGAGCAGAGGCGGCAGTCAAGCCTCTTCTCGTTCCTCATCACGTAGTCGCAACAGTTCAAGAAATTCAACTCCAGGCAGCAGTAGGGGAACTTCTCCTGCTAGAATGGCTGGCAATGGCGGTGATGCTGCTCTTGCTTTGCTGCTGCTTGACAGATTGAACCAGCTTGAGAGCAAAATGTCTGGTAAAGGCCAACAACAACAAGGCCAAACTGTCACTAAGAAATCTGCTGCTGAGGCTTCTAAGAAGCCTCGGCAAAAACGTACTGCCACTAAAGCATACAATGTAACACAAGCTTTCGGCAGACGTGGTCCAGAACAAACCCAAGGAAATTTTGGGGACCAGGAACTAATCAGACAAGGAACTGATTACAAACATTGGCCGCAAATTGCACAATTTGCCCCCAGCGCTTCAGCGTTCTTCGGAATGTCGCGCATTGGCATGGAAGTCACACCTTCGGGAACGTGGTTGACCTACACAGGTGCCATCAAATTGGATGACAAAGATCCAAATTTCAAAGATCAAGTCATTTTGCTGAATAAGCATATTGACGCATACAAAACATTCCCACCAACAGAGCCTAAAAAGGACAAAAAGAAGAAGGCTGATGAAACTCAAGCCTTACCGCAGAGACAGAAGAAACAGCAAACTGTGACTCTTCTTCCTGCTGCAGATTTGGATGATTTCTCCAAACAATTGCAACAATCCATGAGCAGTGCTGACTCAACTCAGGCC"
	
	if args.metadata is not None:
		with open(args.metadata, 'r') as json_metadata:
			sequence_metadata = json.load(json_metadata)
			print("Finished loading sequences metadata file...")
		sequences = {idx: {"V": json_object["sequences"][idx], "D": sequence_metadata["sequences"][idx]["D"], "L": sequence_metadata["sequences"][idx]["L"], "idx": idx} for idx in json_object["sequences"].keys()}
		json_object["sequences"] = list(sequences.values())
	else:
		try:
			sequences = {idx: {"V": json_object["sequences"][idx]["variants"], "D": json_object["sequences"][idx]["D"], "L": json_object["sequences"][idx]["L"], "idx": idx} for idx in json_object["sequences"].keys()}
		except:
			print("Sequences object not stored as dictionary, trying to parse as list with positional idx...")
			sequences = {idx: {"V": json_object["sequences"][idx]["V"], "D": json_object["sequences"][idx]["I"][0], "L": json_object["sequences"][idx]["I"][2], "idx": idx, "pango": json_object["sequences"][idx]["I"][3], "nextstrain": json_object["sequences"][idx]["I"][4]} for idx in range(0, len(json_object["sequences"]))}
		json_object["sequences"] = list(sequences.values())
	if args.sample_list is not None:
		seqid_list = set()
		with open(args.sample_list, 'r') as file:
			for line in file:
				seqid_list.add(line.strip().replace(">", ""))
		json_object["sequences"] = [x for x in json_object["sequences"] if "_".join([str(y) for y in [x["idx"], x["L"], x["D"]]]) in seqid_list]
	if args.sample_size is not None:
		json_object["sequences"] = random.sample(json_object["sequences"], args.sample_size)
	
	if True:
		with open(os.path.join(output, "sequence_annotations.txt"), 'w') as file:
			file.write("{}\n".format("\t".join(["seq_idx", "Date", "Location", "PANGO", "Nextstrain", "MutationCount", "NCount", "GapCount"])))
			for sample in json_object["sequences"]:
				mut_chars = "".join([x[0] for x in zip(sample["V"], list(range(0, len(sample["V"])))) if x[1]%2 == 1])
				char_count = len(mut_chars)
				mut_counts = [char_count, char_count - len(mut_chars.replace("N", "").replace("n", "")), char_count - len(mut_chars.replace("-", ""))]
				mut_counts[0] = mut_counts[0] - (mut_counts[1] + mut_counts[2])
				file.write("{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\n".format(sample["idx"], sample["D"], sample["L"], sample["pango"], sample["nextstrain"], mut_counts[0], mut_counts[1], mut_counts[2]))
	
	if json_tree is not None:
		mut_tree = parse_json_tree(json_tree)
		tree_pos_list = sorted([node["pos"] for node in mut_tree.values() if node["name"] != "root"])
		tree_pos_idx_dict = {tree_pos_list[i]: i for i in range(0, len(tree_pos_list))}
		tree_haplotypes = tree2haplotypes(mut_tree)
	
	dgroups = group_by_month(json_object["sequences"], min_group_size)
	dlgroups = {}
	print("\nTime-based group sizes:")
	for key in dgroups.keys():
		group = dgroups[key]
		print("{} - {}: {}".format(key[0], key[1], len(group)))
	lgroups = group_by_location(json_object["sequences"])
	print("\nLocation-based group sizes:")
	for key in lgroups:
		loc_seqs = [json_object["sequences"][x] for x in lgroups[key]]
		try:
			dlgroups[key] = group_by_month(loc_seqs, min_subgroup_size)
			for subkey in dlgroups[key].keys():
				dlgroups[key][subkey] = [lgroups[key][x] for x in dlgroups[key][subkey]]
		except:
			print("Could not extract date-based subgroups for location {}.".format(key))
		#dlgroups[key] = [lgroups[key][x] for x in group_by_month([json_object["sequences"][x] for x in lgroups[key]], min_group_size)]
		print("{}: {}".format(key, len(lgroups[key])))

	selected_positions = set()
	for date in dgroups.keys():
		seqs = [json_object["sequences"][x] for x in dgroups[date]]
		pos_list = extract_mutations(seqs, freq_threshold, ref_seq, args.one_based, args.extract_fixed_alternates, args.skip_mismatches)
		selected_positions.update(pos_list)
	for loc in lgroups.keys():
		if len(lgroups[loc]) > min_group_size:
			seqs = [json_object["sequences"][x] for x in lgroups[loc]]
			pos_list = extract_mutations(seqs, freq_threshold, ref_seq, args.one_based, args.extract_fixed_alternates, args.skip_mismatches)
			selected_positions.update(pos_list)
	for lkey in dlgroups.keys():
		for dkey in dlgroups[lkey].keys():
			if len(dlgroups[lkey][dkey]) > min_subgroup_size:
				seqs = [json_object["sequences"][x] for x in dlgroups[lkey][dkey]]
				pos_list = extract_mutations(seqs, freq_threshold, ref_seq, args.one_based, args.extract_fixed_alternates, args.skip_mismatches)
				selected_positions.update(pos_list)
	if args.json_tree is not None:
		selected_positions = set(tree_pos_list)
	if args.pos_file is not None:
		with open(args.pos_file, 'r') as pos_file:
			for line in pos_file:
				selected_positions.add(int(line.strip()) - 1)
	selected_positions = sorted(selected_positions)
	
	print("\nSelected {} positions.".format(len(selected_positions)))
	
	seq_idx = 0
	print(len(ref_seq))
	if args.json_tree is not None:
		print(tree_pos_list)
	print(len(json_object["sequences"]))
	
	counter = 0
	for seq in json_object["sequences"]:
		if args.one_based:
			positions = [int(seq["V"][x])-1 for x in range(0, len(seq["V"])) if x % 2 == 0]
		else:
			positions = [int(seq["V"][x]) for x in range(0, len(seq["V"])) if x % 2 == 0]
		alleles = [seq["V"][x] for x in range(0, len(seq["V"])) if x % 2 == 1]
		muts = {x[0]: x[1] for x in zip(positions, alleles)}
		haplotype = [muts.get(x, ref_seq[x]) for x in selected_positions]
		
		seq["H"] = "".join(haplotype)
		if args.metadata is None:
			seq["idx"] = seq_idx
		seq_idx += 1
		if json_tree is not None:
			tree_targets = [muts.get(x, ref_seq[x]) for x in tree_pos_list]
			
			(seq["h_matches"], seq["h_match_mm_ct"]) = get_tree_haplotype(tree_targets, tree_haplotypes, tree_pos_idx_dict)
		counter += 1
		if counter % 20000 == 0:
			print(counter)
	
	if args.json_tree is not None:
		get_haplotype_table(json_object["sequences"], tree_haplotypes, mismatch_threshold)
	get_var_first_last(json_object["sequences"], selected_positions, ref_seq, output)
	with open(os.path.join(output, "Haplotypes.txt"), 'w') as file:
		for pos in selected_positions:
			file.write("{}\n".format(pos))
	
	if args.dump_all_variants:
		variant_counts = {}
		obs_alleles = set()
		for variant in json_object["variants"]:
			variant_counts[variant[0]] = variant_counts.get(variant[0], {})
			variant_counts[variant[0]][variant[1]] = variant[2]
			obs_alleles.add(variant[1])
		for pos_key in variant_counts.keys():
			if pos_key >= len(json_object["reference_base"]):
				if args.skip_mismatches:
					print("Warning, position({}) exceeds length of reference sequence, skipping...".format(pos_key))
					continue
			if json_object["reference_base"][pos_key] in variant_counts[pos_key].keys() and not args.skip_mismatches:
				raise Exception("Ref allele listed as variant: {}, {}".format(pos_key, json_object["reference_base"][pos_key]))
			max_alt_count = max(variant_counts[pos_key].values())
			ref_count = len(json_object["sequences"]) - sum(list(variant_counts[pos_key].values()))
			variant_counts[pos_key][json_object["reference_base"][pos_key]] = ref_count
			variant_counts[pos_key]["reference"] = json_object["reference_base"][pos_key]
			variant_counts[pos_key]["ref_count"] = ref_count
			variant_counts[pos_key]["max_alt_count"] = max_alt_count
		obs_alleles = sorted(list(obs_alleles))
		with open(os.path.join(output, "variant_dump.txt"), "w") as file:
			header = ["pos", "reference", "ref_count", "max_alt_count"] + obs_alleles
			file.write("{}\n".format("\t".join(header)))
			for pos_key in sorted(variant_counts.keys()):
				line = [pos_key] + [variant_counts[pos_key].get(x, 0) for x in header[1:]]
				file.write("{}\n".format("\t".join([str(x) for x in line])))
	for key in dgroups.keys():
		temp_seqs = [json_object["sequences"][x] for x in dgroups[key]]
		start = key[0]
		end = key[1]
		if start.month == end.month:
			fname = "{}_{}.fasta".format(start.year, start.month)
		else:
			fname = "{}_{}-{}_{}.fasta".format(start.year, start.month, end.year, end.month)
		with open(os.path.join(output, fname), 'w') as file:
			for temp_seq in temp_seqs:
				
				file.write(">{}_{}_{}\n".format(temp_seq["idx"], temp_seq["L"], temp_seq["D"]))
				file.write("{}\n".format(temp_seq["H"]))
	locations = sorted(set(seq["L"] for seq in json_object["sequences"]))
	for location in locations:
		with open(os.path.join(output, "{}.fasta".format(location)), 'w') as file:
			for seq in json_object["sequences"]:
				if seq["L"] == location:
					
					file.write(">{}_{}_{}\n".format(seq["idx"], seq["L"], seq["D"]))
					file.write("{}\n".format(seq["H"]))
	for lkey in dlgroups.keys():
		for dkey in dlgroups[lkey].keys():
			temp_seqs = [json_object["sequences"][x] for x in dlgroups[lkey][dkey]]
			start = dkey[0]
			end = dkey[1]
			if start.month == end.month:
				fname = "{}_{}.fasta".format(start.year, start.month)
			else:
				fname = "{}_{}-{}_{}.fasta".format(start.year, start.month, end.year, end.month)
			fname = "{}__".format(lkey) + fname
			with open(os.path.join(output, fname), 'w') as file:
				for temp_seq in temp_seqs:
					
					file.write(">{}_{}_{}\n".format(temp_seq["idx"], temp_seq["L"], temp_seq["D"]))
					file.write("{}\n".format(temp_seq["H"]))
	with open(os.path.join(output, "{}.fasta".format("all_seqs")), 'w') as file:
		for seq in json_object["sequences"]:
			file.write(">{}_{}_{}\n".format(seq["idx"], seq["L"], seq["D"]))
			file.write("{}\n".format(seq["H"]))


def parse_json_tree(json_tree):
	if very_verbose:
		print("Starting function {}".format("parse_json_tree"))
	with open(json_tree, 'r') as json_tree_data:
		json_tree = json.load(json_tree_data)
		print("Finished loading JSON tree file...")
		mut_tree = {
			"root": {"name": "root", "pos": "NA", "variant": "NA", "group": "root", "subgroup": "root", "parent": "NA",
					 "CPI": 1.0, "bootstrap": 1.0, "children": []}}
	for mut in json_tree:
		mut_tree[mut["name"]] = {key: mut[key] for key in mut.keys()}
		mut_tree[mut["name"]]["children"] = []
	for key in mut_tree.keys():
		if mut_tree[key]["name"] == "root":
			continue
		mut_tree[mut_tree[key]["parent"]]["children"].append(mut_tree[key])
	return mut_tree


def get_haplotype_table(sequences, tree_haplotypes, mismatch_threshold):
	if very_verbose:
		print("Starting function {}".format("get_haplotype_table"))
	months = sorted(set([(int(seq["D"][0:4]), int(seq["D"][4:6])) for seq in sequences if seq["D"] is not None]))
	haplotypes = {key1: {key2: 0 for key2 in months} for key1 in tree_haplotypes.keys()}
	for key in haplotypes.keys():
		haplotypes[key]["mismatch_ct"] = {}
	for seq in sequences:
		
		if seq["h_match_mm_ct"] is None or seq["h_match_mm_ct"] > mismatch_threshold or seq["D"] is None:
			continue
		month = (int(seq["D"][0:4]), int(seq["D"][4:6]))
		date = datetime.datetime(int(seq["D"][0:4]), int(seq["D"][4:6]), int(seq["D"][6:8]))
		for ht in seq["h_matches"]:
			haplotypes[ht][month] += 1
			haplotypes[ht]["first"] = min(date, haplotypes[ht].get("first", date))
			haplotypes[ht]["last"] = max(date, haplotypes[ht].get("last", date))
			haplotypes[ht]["mismatch_ct"][seq["h_match_mm_ct"]] = haplotypes[ht]["mismatch_ct"].get(seq["h_match_mm_ct"], 0) + 1
	with open("haplotype_table.txt", "w") as file:
		fields = ["ht", "pos", "variant", "first", "last"] + ["{}_{}".format(month[0], month[1]) for month in months] + ["mismatch_counts"]
		file.write("{}\n".format("\t".join(fields)))
		for ht in haplotypes.keys():
			file.write("{}\t{}\t{}\t{}\t{}\t".format(ht, tree_haplotypes[ht]["pos"], tree_haplotypes[ht]["variant"], haplotypes[ht].get("first", ""), haplotypes[ht].get("last", "")))
			mm_ct_string = "=\"" + ";".join(["{}:{}".format(key, haplotypes[ht]["mismatch_ct"][key]) for key in sorted(haplotypes[ht]["mismatch_ct"].keys())]) + "\""
			file.write("{}\t{}\n".format("\t".join([str(haplotypes[ht][month]) for month in months]), mm_ct_string))



def get_tree_haplotype(tree_targets, tree_haplotypes, tree_pos_idx_dict):
	if very_verbose:
		print("Starting function {}".format("get_tree_haplotype"))
	matches = []
	
	for key in tree_haplotypes.keys():
		match = True
		mismatch_ct = 0
		for pair in tree_haplotypes[key]["included"]:
			if tree_targets[tree_pos_idx_dict[pair[0]]] != pair[1]:
				
				match = False
				break
		if not match:
			continue
		for pair in tree_haplotypes[key]["excluded"]:
			if tree_targets[tree_pos_idx_dict[pair[0]]] == pair[1]:
				
				match = False
				break
		if not match:
			continue
		for pair in tree_haplotypes[key]["other"]:
			if tree_targets[tree_pos_idx_dict[pair[0]]] == pair[1]:
				mismatch_ct += 1
		matches.append((key, mismatch_ct))
	if len(matches) == 0:
		return None, None
	best_mm_ct = min([val[1] for val in matches])
	return [val[0] for val in matches if val[1] == best_mm_ct], best_mm_ct

def tree2haplotypes(mut_tree):
	if very_verbose:
		print("Starting function {}".format("tree2haplotypes"))
	haplotypes = {}  # Haplotypes structured as a dict of dicts containing a list of included muts, a list of excluded muts, and a list of all other muts.
	for key in mut_tree.keys():
		if key == "root":
			continue
		haplotypes[key] = {}
		
		included = [key]
		included.extend(get_all_ancestors(mut_tree, key))
		
		excluded = get_all_descendants(mut_tree, key)
		excluded.remove(key)
		
		other = [key2 for key2 in mut_tree.keys() if
					key2 not in included and key2 not in excluded and key2 != "root"]
		
		haplotypes[key]["included"] = [(mut_tree[val]["pos"], mut_tree[val]["variant"]) for val in included]
		haplotypes[key]["excluded"] = [(mut_tree[val]["pos"], mut_tree[val]["variant"]) for val in excluded]
		haplotypes[key]["other"] = [(mut_tree[val]["pos"], mut_tree[val]["variant"]) for val in other]
		haplotypes[key]["pos"] = mut_tree[key]["pos"]
		haplotypes[key]["variant"] = mut_tree[key]["variant"]
	return haplotypes


def get_all_ancestors(mut_tree, target_node):
	child_node = target_node
	ancestors = []
	while mut_tree[child_node]["parent"] not in ["root", "NA"]:
		ancestors.append(mut_tree[child_node]["parent"])
		child_node = mut_tree[child_node]["parent"]
	return ancestors


def get_all_descendants(mut_tree, target_node):
	descendants = [target_node]
	for child in mut_tree[target_node]["children"]:
		
		if len(child["children"]) > 0:
			descendants.extend(get_all_descendants(mut_tree, child["name"]))
	return descendants


def group_by_location(sequences):
	if very_verbose:
		print("Starting function {}".format("group_by_location"))
	groups = {}
	seq_idx = 0
	for seq in sequences:
		groups[seq["L"]] = groups.get(seq["L"], []) + [seq_idx]
		seq_idx += 1
	return groups


def group_by_month(sequences, sample_size_min):
	if very_verbose:
		print("Starting function {}".format("group_by_month"))
	cutoffs = []
	dates = [datetime.datetime(int(seq["D"][0:4]), int(seq["D"][4:6]), int(seq["D"][6:8])) for seq in sequences if
			 seq["D"] is not None]
	dates.sort()
	prev_date = min(dates)
	final_date = max(dates)
	first_date = datetime.datetime(prev_date.year, prev_date.month, 1)
	gcount = 0
	for date in dates:
		if date.month != prev_date.month and gcount >= sample_size_min:
			cutoffs.append(datetime.datetime(date.year, date.month, 1) - datetime.timedelta(seconds=1))
			gcount = 0
		prev_date = date
		gcount += 1
	cutoffs.append(datetime.datetime(final_date.year, final_date.month, final_date.day))
	groups = [[] for i in range(0, len(cutoffs))]
	seq_idx = 0
	for seq in sequences:
		if seq["D"] is None:
			seq_idx += 1
			continue
		date = datetime.datetime(int(seq["D"][0:4]), int(seq["D"][4:6]), int(seq["D"][6:8]))
		group_idx = 0
		for cutoff in cutoffs:
			if date <= cutoff:
				groups[group_idx].append(seq_idx)
				break
			group_idx += 1
		seq_idx += 1
	window_starts = [first_date] + [x + datetime.timedelta(seconds=1) for x in cutoffs[:-1]]
	return {(x[0], x[1]): x[2] for x in zip(window_starts, cutoffs, groups)}


def get_var_first_last(sequences, selected_positions, ref_seq, output_dir):
	preload_seq_cols = False
	if very_verbose:
		print("Starting function {}".format("get_var_first_last"))
	dates = [datetime.datetime(int(seq["D"][0:4]), int(seq["D"][4:6]), int(seq["D"][6:8])) for seq in sequences if
			 seq["D"] is not None]
	seqs = [seq["H"] for seq in sequences if seq["D"] is not None]
	seq_dates = list(zip(seqs, dates))
	var_dates = {}
	start_time = datetime.datetime.now()
	if preload_seq_cols:
		seq_cols = [[seq[0]] for seq in seqs]
		for seq in seqs:
			for pos in range(1, len(seq_dates[0][0])):
				seq_cols[pos].append(seq[pos])
		print("Preloaded Haplotype columns in {}...".format(datetime.datetime.now() - start_time))
	counter = 0
	start_time = datetime.datetime.now()
	for pos in range(0, len(seq_dates[0][0])):
		counter += 1
		if counter % 50 == 0:
			print("Processed {} of {} positions in {}...".format(counter, len(seq_dates[0][0]), datetime.datetime.now() - start_time))
		reference = ref_seq[selected_positions[pos]]
		var_dates[pos] = {}
		if preload_seq_cols:
			seq_col = seq_cols[pos]
			pos_vars = set(seq_col)
		else:
			pos_vars = set([seq[pos] for seq in seqs])
		for var in pos_vars:
			
			if preload_seq_cols:
				pos_var_dates = [seq_date[1] for seq_date in zip(seq_col, dates) if seq_date[0] == var]
			else:
				pos_var_dates = [seq_date[1] for seq_date in seq_dates if seq_date[0][pos] == var]
			var_dates[pos][var] = {"position": selected_positions[pos] + 1, "count": len(pos_var_dates), "first": min(pos_var_dates), "last": max(pos_var_dates),
								   "reference": reference}
	with open(os.path.join(output_dir, "variant_stats.txt"), "w") as file:
		file.write("position\treference\talternate\tcount\tfirst_obs\tlast_obs\n")
		for pos in sorted(var_dates.keys()):
			for var in var_dates[pos].keys():
				file.write(
					"{}\t{}\t{}\t{}\t{}\t{}\n".format(var_dates[pos][var]["position"], var_dates[pos][var]["reference"],
													  var, var_dates[pos][var]["count"], var_dates[pos][var]["first"],
													  var_dates[pos][var]["last"]))


def extract_mutations(seq_pool, freq_threshold, ref_seq, one_based, extract_fixed_alternates, skip_mismatches):
	if very_verbose:
		print("Starting function {}".format("extract_mutations"))
	mut_dict = {}
	pos_list = []
	mismatch_count = 0
	threshold = freq_threshold * len(seq_pool)
	for seq in seq_pool:
		if one_based:
			positions = [int(seq["V"][x]) - 1 for x in range(0, len(seq["V"])) if x % 2 == 0]
		else:
			positions = [int(seq["V"][x]) for x in range(0, len(seq["V"])) if x % 2 == 0]
		alleles = [seq["V"][x] for x in range(0, len(seq["V"])) if x % 2 == 1]
		for x in zip(positions, alleles):
			mut_dict[(x[0], x[1])] = mut_dict.get((x[0], x[1]), 0) + 1
	pos_dict = {x: {} for x in set([y[0] for y in mut_dict.keys()])}
	for key in mut_dict.keys():
		pos_dict[key[0]][key[1]] = mut_dict[key]
	
	for pos in sorted(list(pos_dict.keys())):
		ref = ref_seq[pos]
		if verbose:
			print("{}\t{}\t{}".format(pos, ref, pos_dict[pos]))
		if ref in pos_dict[pos].keys():
			if skip_mismatches:
				mismatch_count += 1
				if verbose:
					print("{}\t{}\t{}".format(pos, ref, pos_dict[pos]))
					print("Ref allele {} listed as variant, skipping position {}.".format(ref, pos))
				continue
			else:
				if not verbose:
					print("{}\t{}\t{}".format(pos, ref, pos_dict[pos]))
				raise Exception("Ref allele {} listed as variant, skipping position {}.".format(ref, pos))
		else:
			pos_dict[pos][ref] = len(seq_pool) - sum(pos_dict[pos].values())
		if sorted(pos_dict[pos].values(), reverse=True)[1] >= threshold:
			pos_list.append(pos)
		elif extract_fixed_alternates:
			for key in pos_dict[pos].keys():
				if key == ref:
					continue
				if pos_dict[pos][key] >= threshold:
					pos_list.append(pos)
					break
	print("Skipped {} positions where reference allele was listed as variant.".format(mismatch_count))
	return pos_list


if __name__ == '__main__':
	parser = argparse.ArgumentParser(description="Mutation pathmaker.")
	parser.add_argument("json_vcf", help="Input JSON file.", type=str)
	parser.add_argument("--reference", help="File containing alternate reference sequence.", type=str, default=None)
	parser.add_argument("--min_group_size",
						help="Minimum time- or location-based group size to consider when extracting common mutations for each group.",
						type=int, default=500)
	parser.add_argument("--min_subgroup_size",
						help="Minimum time- AND location-based group size to consider when extracting common mutations for each group.",
						type=int, default=100)
	parser.add_argument("--min_freq", help="Minimum minor allele frequency within a group to select that position.",
						type=float, default=0.05)
	parser.add_argument("-o", "--output", help="Output directory to put results in.", type=str, default=".")
	parser.add_argument("-m", "--metadata", help="Alternate file to pull metadata from.", type=str, default=None)
	parser.add_argument("-t", "--json_tree", help="Mutation tree specified in JSON format for haplotype analysis.",
						type=str, default=None)
	parser.add_argument("--mismatch_threshold", help="Maximum number of allowed 'side' mutations when assigning a sequence to a haplotype.", type=int, default=0)
	parser.add_argument("--one_based", help="Treat variant coordinates as 1-based (defaults to 0-based).", action='store_true', default=False)
	parser.add_argument("--skip_mismatches", help="Skip positions where the reference base is given as an alternate, instead of raising an error.", action='store_true', default=False)
	parser.add_argument("--pos_file", help="File containing list of positions to force inclusion of.", type=str, default=None)
	parser.add_argument("--dump_all_variants", help="Generate a tabular file of summary information for every observed variant.", action='store_true', default=False)
	parser.add_argument("--extract_fixed_alternates", help="Extract positions where a non-reference allele exceeds the threshold to be considered fixed.", action='store_true', default=False)
	parser.add_argument("-v", "--verbose", help="Print verbose status messages.", action='store_true', default=False)
	parser.add_argument("--sample_size", help="Select N sequences randomly from full set (mostly for faster testing).", type=int, default=None)
	parser.add_argument("--sample_list", help="File with list of sequence names to select.", type=str, default=None)
	args = parser.parse_args()
	verbose = args.verbose
	main(args)
	
	output = args.output
	Anno=open(os.path.join(output, "sequence_annotations.txt"),'r').readlines()[1:]
	CountryLs={}
	for i in Anno:
		Count=i.split('\t')[2]
		CountryLs[Count]=CountryLs.get(Count,0)+1
	AllFas=glob.glob(os.path.join(output, "*.fasta"))
	TarFas=[]
	for Count in CountryLs:
		CountFas=glob.glob(os.path.join(output, Count+"__*.fasta"))
		TarFas+=CountFas
	for Fas in AllFas:
		if TarFas.count(Fas)==0: os.remove(Fas)
		else: print ('haplotype alignment',Fas)
	
